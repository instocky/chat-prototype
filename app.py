import streamlit as st
from langchain_groq import ChatGroq
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationChain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv
import os

load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞ —á–µ—Ç–∫–∏–µ –∏ –ø–æ –¥–µ–ª—É.
–ï—Å–ª–∏ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å - —Ç—ã –¥–∞–µ—à—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—à—å –æ–± —ç—Ç–æ–º.
"""

# –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
TEMPLATE = """
{system_prompt}

–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{history}

–ß–µ–ª–æ–≤–µ–∫: {input}
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"""

def initialize_chat():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∑–¥–µ—Å—å)
    chat = ChatGroq(
        groq_api_key=os.getenv('GROQ_API_KEY'),
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π:
        # model_name="mixtral-8x7b-32768"
        model_name="llama-3.1-70b-versatile",
        temperature=0.7,  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0.0 - 1.0)
        max_tokens=4096,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
    )
    
    # –°–æ–∑–¥–∞—ë–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
    prompt = PromptTemplate(
        input_variables=["history", "input"],
        partial_variables={"system_prompt": SYSTEM_PROMPT},
        template=TEMPLATE
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    memory = ConversationBufferMemory(
        human_prefix="–ß–µ–ª–æ–≤–µ–∫",
        ai_prefix="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
    )
    
    # –°–æ–∑–¥–∞—ë–º —Ü–µ–ø–æ—á–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    conversation = ConversationChain(
        llm=chat,
        memory=memory,
        prompt=prompt,
        verbose=True
    )
    
    return conversation


def main():
    st.title("ü§ñ –ß–∞—Ç-–±–æ—Ç –ø—Ä–æ—Ç–æ—Ç–∏–ø")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    if "conversation" not in st.session_state:
        st.session_state.conversation = initialize_chat()
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
            
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
        with st.chat_message("assistant"):
            response = st.session_state.conversation.predict(input=prompt)
            st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

if __name__ == "__main__":
    main()